local library = loadstring(game:HttpGet("https://raw.githubusercontent.com/memejames/elerium-v2-ui-library/main/Library", true))()

local window = library:AddWindow("Roblox Scripts", {
    main_color = Color3.fromRGB(1, 2, 3),
    min_size = Vector2.new(655, 650),
    can_resize = false,
})

local Player = window:AddTab("Players")
local folder1 = Player:AddFolder("ESP")

local Players = game:GetService("Players")
local RunService = game:GetService("RunService")
local LocalPlayer = Players.LocalPlayer
local espGuis = {}
local espEnabled = false
local TargetPlayerName = ""

folder1:AddSwitch("ESP ALL", function(state)
    espEnabled = state

    if espEnabled then
        local nameFont = Enum.Font.Garamond
        local distanceFont = Enum.Font.Bangers
        local nameColor = Color3.fromRGB(255, 255, 255)
        local distanceColor = Color3.fromRGB(255, 0, 0)
        local textSize = 15

        local function createESP(player)
            if player == LocalPlayer or not player.Character or not player.Character:FindFirstChild("Head") then
                return
            end

            if espGuis[player] then
                for _, gui in pairs(espGuis[player]) do
                    gui:Destroy()
                end
                espGuis[player] = nil
            end

            espGuis[player] = {}

            local billboard = Instance.new("BillboardGui")
            billboard.Name = "ESP"
            billboard.Adornee = player.Character.Head
            billboard.AlwaysOnTop = true
            billboard.Size = UDim2.new(0, 200, 0, 50)
            billboard.StudsOffset = Vector3.new(0, 3, 0)
            billboard.Parent = player.Character.Head

            local nameLabel = Instance.new("TextLabel")
            nameLabel.Name = "Name"
            nameLabel.Text = player.Name
            nameLabel.Font = nameFont
            nameLabel.TextColor3 = nameColor
            nameLabel.TextSize = textSize
            nameLabel.BackgroundTransparency = 1
            nameLabel.Size = UDim2.new(1, 0, 0.5, 0)
            nameLabel.Position = UDim2.new(0, 0, 0, 0)
            nameLabel.Parent = billboard

            local distanceLabel = Instance.new("TextLabel")
            distanceLabel.Name = "Distance"
            distanceLabel.Text = "Distance: Calculating..."
            distanceLabel.Font = distanceFont
            distanceLabel.TextColor3 = distanceColor
            distanceLabel.TextSize = textSize
            distanceLabel.BackgroundTransparency = 1
            distanceLabel.Size = UDim2.new(1, 0, 0.5, 0)
            distanceLabel.Position = UDim2.new(0, 0, 0.5, 0)
            distanceLabel.Parent = billboard

            local highlight = Instance.new("Highlight")
            highlight.Name = "ESPHighlight"
            highlight.Adornee = player.Character
            highlight.OutlineColor = Color3.fromRGB(255, 0, 0)
            highlight.FillTransparency = 1
            highlight.OutlineTransparency = 0
            highlight.Parent = player.Character

            espGuis[player].Billboard = billboard
            espGuis[player].Highlight = highlight
        end

        local function updateESP()
            if not espEnabled then return end

            local localChar = LocalPlayer.Character
            if not localChar or not localChar:FindFirstChild("HumanoidRootPart") then return end

            local localPos = localChar.HumanoidRootPart.Position

            for player, guis in pairs(espGuis) do
                if player and player.Character and player.Character:FindFirstChild("HumanoidRootPart") then
                    local targetPos = player.Character.HumanoidRootPart.Position
                    local distance = (localPos - targetPos).Magnitude
                    guis.Billboard.Distance.Text = string.format("Distance: %.1f studs", distance)
                else
                    for _, gui in pairs(guis) do
                        gui:Destroy()
                    end
                    espGuis[player] = nil
                end
            end
        end

        Players.PlayerAdded:Connect(function(player)
            player.CharacterAdded:Connect(function()
                if espEnabled then
                    createESP(player)
                end
            end)
        end)

        Players.PlayerRemoving:Connect(function(player)
            if espGuis[player] then
                for _, gui in pairs(espGuis[player]) do
                    gui:Destroy()
                end
                espGuis[player] = nil
            end
        end)

        for _, player in ipairs(Players:GetPlayers()) do
            if player ~= LocalPlayer and player.Character then
                createESP(player)
            end
            player.CharacterAdded:Connect(function()
                if espEnabled then
                    createESP(player)
                end
            end)
        end

        RunService.RenderStepped:Connect(updateESP)
    else
        for player, guis in pairs(espGuis or {}) do
            for _, gui in pairs(guis) do
                if gui then
                    gui:Destroy()
                end
            end
            espGuis[player] = nil
        end
    end
end)

local folder2 = Player:AddFolder("Client")

folder2:AddSwitch("Fly", function(state)
Fly = state
if fly then
local UserInputService = game:GetService("UserInputService")
local Players = game:GetService("Players")
local ContextActionService = game:GetService("ContextActionService")
local GuiService = game:GetService("GuiService")

local player = Players.LocalPlayer
local character = player.Character or player.CharacterAdded:Wait()
local humanoid = character:WaitForChild("Humanoid")
local rootPart = character:WaitForChild("HumanoidRootPart")

local flying = false
local speed = 50 -- Adjust fly speed here
local bodyVelocity = nil
local bodyGyro = nil
local isMobile = UserInputService.TouchEnabled and not UserInputService.KeyboardEnabled

-- Function to start flying
local function startFlying()
    flying = true
    bodyVelocity = Instance.new("BodyVelocity")
    bodyVelocity.MaxForce = Vector3.new(math.huge, math.huge, math.huge)
    bodyVelocity.Velocity = Vector3.new(0, 0, 0)
    bodyVelocity.Parent = rootPart

    bodyGyro = Instance.new("BodyGyro")
    bodyGyro.MaxTorque = Vector3.new(math.huge, math.huge, math.huge)
    bodyGyro.CFrame = rootPart.CFrame
    bodyGyro.Parent = rootPart

    humanoid.PlatformStand = true -- Disable default walking
end

-- Function to stop flying
local function stopFlying()
    flying = false
    if bodyVelocity then
        bodyVelocity:Destroy()
        bodyVelocity = nil
    end
    if bodyGyro then
        bodyGyro:Destroy()
        bodyGyro = nil
    end
    humanoid.PlatformStand = false -- Re-enable walking
end

-- Create mobile fly button
local function createFlyButton()
    local screenGui = Instance.new("ScreenGui")
    screenGui.Parent = player.PlayerGui
    screenGui.Name = "FlyGui"

    local flyButton = Instance.new("TextButton")
    flyButton.Size = UDim2.new(0, 100, 0, 50)
    flyButton.Position = UDim2.new(0.85, 0, 0.8, 0)
    flyButton.Text = "Fly"
    flyButton.BackgroundColor3 = Color3.fromRGB(0, 170, 255)
    flyButton.TextColor3 = Color3.fromRGB(255, 255, 255)
    flyButton.Parent = screenGui

    flyButton.MouseButton1Click:Connect(function()
        if flying then
            stopFlying()
            flyButton.Text = "Fly"
        else
            startFlying()
            flyButton.Text = "Stop Flying"
        end
    end)

    return screenGui
end

-- Toggle flying for PC (F key)
local function handleFlyToggle(actionName, inputState, inputObject)
    if inputState == Enum.UserInputState.Begin and not GuiService.MenuIsOpen then
        if flying then
            stopFlying()
        else
            startFlying()
        end
    end
    return Enum.ContextActionResult.Pass
end

-- Bind fly toggle for PC
ContextActionService:BindAction("ToggleFly", handleFlyToggle, false, Enum.KeyCode.F)

-- Create mobile button if on mobile device
if isMobile then
    createFlyButton()
end

-- Control flight direction
game:GetService("RunService").RenderStepped:Connect(function()
    if flying then
        local camera = workspace.CurrentCamera
        local moveDirection = Vector3.new(0, 0, 0)

        if isMobile then
            -- Use Roblox's default mobile joystick input
            local moveVector = humanoid.MoveDirection
            moveDirection = moveDirection + moveVector
            -- Add vertical controls for mobile (jump for up, custom for down)
            if UserInputService:IsKeyDown(Enum.KeyCode.Space) or UserInputService:IsKeyDown(Enum.KeyCode.ButtonA) then
                moveDirection = moveDirection + Vector3.new(0, 1, 0)
            end
            if UserInputService:IsKeyDown(Enum.KeyCode.LeftControl) then
                moveDirection = moveDirection - Vector3.new(0, 1, 0)
            end
        else
            -- PC controls
            if UserInputService:IsKeyDown(Enum.KeyCode.W) then
                moveDirection = moveDirection + camera.CFrame.LookVector
            end
            if UserInputService:IsKeyDown(Enum.KeyCode.S) then
                moveDirection = moveDirection - camera.CFrame.LookVector
            end
            if UserInputService:IsKeyDown(Enum.KeyCode.A) then
                moveDirection = moveDirection - camera.CFrame.RightVector
            end
            if UserInputService:IsKeyDown(Enum.KeyCode.D) then
                moveDirection = moveDirection + camera.CFrame.RightVector
            end
            if UserInputService:IsKeyDown(Enum.KeyCode.Space) then
                moveDirection = moveDirection + Vector3.new(0, 1, 0)
            end
            if UserInputService:IsKeyDown(Enum.KeyCode.LeftControl) then
                moveDirection = moveDirection - Vector3.new(0, 1, 0)
            end
        end

        -- Normalize and apply speed
        if moveDirection.Magnitude > 0 then
            moveDirection = moveDirection.Unit * speed
        end
        bodyVelocity.Velocity = moveDirection
        bodyGyro.CFrame = camera.CFrame
    end
end)

-- Handle character respawn
player.CharacterAdded:Connect(function(newCharacter)
    character = newCharacter
    humanoid = character:WaitForChild("Humanoid")
    rootPart = character:WaitForChild("HumanoidRootPart")
    if flying then
        startFlying()
    end
end)

